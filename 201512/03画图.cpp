//#include <bits/stdc++.h>
//
//using namespace std;
//
//int m,n,q;
//string a[101][101];
//
//int main(){
//	cin >> m >> n >> q;
//
//	for(int i = 0; i < n; i++){
//		for(int j = 0; j < m; j++){
//			a[i][j] = ".";
//		}
//	}
//
//	for(int i = 0; i < q; i++){
//		int y,x1,x2,y1,y2;
//		string s;
//		cin >> y;
//		if(y == 0){
//			cin >> x1 >> y1 >> x2 >> y2;
//			if(x1 == x2){
//				y1 = n-1-y1;
//				y2 = n-1-y2;
//				for(int j = min(y1,y2); j <= max((y1,y2)); j++){
//					a[j][x1] = a[j][x1] == "-" ? "+" : "|";
//				}
//			}else{
//				for(int j = min(x1,x2); j <= max(x1,x2); j++){
//					a[n-1-y1][j] = a[n-1-y1][j] == "|" ? "+" : "-";
//				}
//			}
//		}else if(y == 1){
//			cin >> x1 >> y1;
//			cin.get();
//			cin >> s;
//			for(int j = n-1-y1; j >= 0; j--){   //右上
//				if(a[j][x1] == "-" || a[j][x1] == "+"){
//					break;
//				}
//				for(int k = x1; k < m; k++){
//					if(a[j][k] == "|" || a[j][k] == "+"){
//						break;
//					}
//					if(a[j][k] != "-"){
//						a[j][k] = s;
//					}
//				}
//			}
//
//			for(int j = n-1-y1; j < n; j++){        //右下
//				if(a[j][x1] == "-" || a[j][x1] == "+"){
//					break;
//				}
//				for(int k = x1; k < m; k++){
//					if(a[j][k] == "|" || a[j][k] == "+"){
//						break;
//					}
//					if(a[j][k] != "-"){
//						a[j][k] = s;
//					}
//				}
//			}
//			for(int j = n-1-y1; j >= 0; j--){   //左上
//				if(a[j][x1] == "-" || a[j][x1] == "+"){
//					break;
//				}
//				for(int k = x1; k >= 0; k--){
//					if(a[j][k] == "|" || a[j][k] == "+"){
//						break;
//					}
//					if(a[j][k] != "-"){
//						a[j][k] = s;
//					}
//				}
//			}
//			for(int j = n-1-y1; j < n; j++){        //左下
//				if(a[j][x1] == "-" || a[j][x1] == "+"){
//					break;
//				}
//				for(int k = x1; k >= 0; k--){
//					if(a[j][k] == "|" || a[j][k] == "+"){
//						break;
//					}
//					if(a[j][k] != "-"){
//						a[j][k] = s;
//					}
//				}
//			}
//		}
//	}
//
//	for(int i = 0; i < n; i++){
//		for(int j = 0; j < m; j++){
//			cout << a[i][j];
//		}
//		cout << endl;
//	}
//	return 0;
//}

#include <bits/stdc++.h>

using namespace std;

int m,n,q;
char a[101][101];
int mark[101][101];

bool judge(int x,int y){
    if(x<0 || y<0 || x>m || y>n){
    	return false;
	}else if(mark[y][x] == 1){
    	return false;
	}else if(a[y][x]=='+' || a[y][x]=='|' || a[y][x]=='-'){
    	return false;
	}else{
    	return true;
	} 
}

void dfs(int x,int y,char c){
    a[y][x] = c;
    mark[y][x] = 1;
    if(judge(x,y+1)){   //向下移动
        dfs(x,y+1,c);
    }
    if(judge(x+1,y)){   //向右移动
        dfs(x+1,y,c);
    }
    if(judge(x,y-1)){   //向上移动
        dfs(x,y-1,c);
    }
    if(judge(x-1,y)){   //向左移动
        dfs(x-1,y,c);
    }
}

int main(){
	cin >> m >> n >> q;
	memset(a, '.', sizeof(a));

	for(int i = 0; i < q; i++){
		int y,x1,y1;
		cin >> y;
		if(y == 0){
			int x2,y2;
			cin >> x1 >> y1 >> x2 >> y2;
			y1 = n-1-y1;
			y2 = n-1-y2;
			if(x1 == x2){
				for(int j = min(y1,y2); j <= max(y1,y2); j++){
					/*
                        之后忘记加 a[j][x1] == '+'这个条件，扣10分，蓝瘦，啊啊啊啊啊啊啊啊
					*/
					a[j][x1] = a[j][x1] == '-' || a[j][x1] == '+' ? '+' : '|';
				}
			}else{
				for(int j = min(x1,x2); j <= max(x1,x2); j++){
					a[y1][j] = a[y1][j] == '|' || a[y1][j] == '+' ? '+' : '-';
				}
			}
		}else if(y == 1){
			char c;
			cin >> x1 >> y1 >> c;
			/*
				要命处，刚开始忘记每次初始化0了，结果只能拿50分
			*/
   			memset(mark, 0, sizeof(mark));
			dfs(x1,n-1-y1,c);
		}
	}

	for(int i = 0; i < n; i++){
		for(int j = 0; j < m; j++){
			cout << a[i][j];
		}
  		cout << endl;
	}
	return 0;
}

/*=================================================================
输入
4 2 4
1 0 0 B
0 1 0 2 0
0 1 0 1 1
1 0 0 A
输出
A|AA
A+-A
输入
16 13 9
0 3 1 12 1
0 12 1 12 3
0 12 3 6 3
0 6 3 6 9
0 6 9 12 9
0 12 9 12 11
0 12 11 3 11
0 3 11 3 1
1 0 0  C
输出
................
...+--------+...
...|CCCCCCCC|...
...|CC+-----+...
...|CC|.........
...|CC|.........
...|CC|.........
...|CC|.........
...|CC|.........
...|CC+-----+...
...|CCCCCCCC|...
...+--------+...
................
=================================================================*/
/*
问题描述
　　用 ASCII 字符来画图是一件有趣的事情，并形成了一门被称为 ASCII Art 的艺术。例如，下图是用 ASCII 字符画出来的 CSPRO 字样。
　　..____.____..____..____...___..
　　./.___/.___||.._.\|.._.\./._.\.
　　|.|...\___.\|.|_).|.|_).|.|.|.|
　　|.|___.___).|..__/|.._.<|.|_|.|
　　.\____|____/|_|...|_|.\_\\___/.
　　本题要求编程实现一个用 ASCII 字符来画图的程序，支持以下两种操作：
　　Y画线：给出两个端点的坐标，画一条连接这两个端点的线段。简便起见题目保证要画的每条线段都是水平或者竖直的。水平线段用
字符 - 来画，竖直线段用字符 | 来画。如果一条水平线段和一条竖直线段在某个位置相交，则相交位置用字符 + 代替。
　　Y填充：给出填充的起始位置坐标和需要填充的字符，从起始位置开始，用该字符填充相邻位置，直到遇到画布边缘或已经画好的线
段。注意这里的相邻位置只需要考虑上下左右 4 个方向，如下图所示，字符 @ 只和 4 个字符 * 相邻。
　　.*.
　　*@*
　　.*.
输入格式
　　第1行有三个整数m, n和q。m和n分别表示画布的宽度和高度，以字符为单位。q表示画图操作的个数。
　　第2行至第q + 1行，每行是以下两种形式之一：
　　Y 0 x1 y1 x2 y2：表示画线段的操作，(x1, y1)和(x2, y2)分别是线段的两端，满足要么x1 = x2 且y1 ≠ y2，要么 y1 = y2 且 x1 ≠ x2。
　　Y 1 x y c：表示填充操作，(x, y)是起始位置，保证不会落在任何已有的线段上；c 为填充字符，是大小写字母。
　　画布的左下角是坐标为 (0, 0) 的位置，向右为x坐标增大的方向，向上为y坐标增大的方向。这q个操作按照数据给出的顺序依次执行。
画布最初时所有位置都是字符 .（小数点）。
输出格式
　　输出有n行，每行m个字符，表示依次执行这q个操作后得到的画图结果。
样例输入
4 2 3
1 0 0 B
0 1 0 2 0
1 0 0 A
样例输出
AAAA
A--A
样例输入
16 13 9
0 3 1 12 1
0 12 1 12 3
0 12 3 6 3
0 6 3 6 9
0 6 9 12 9
0 12 9 12 11
0 12 11 3 11
0 3 11 3 1
1 4 2 C
样例输出
................
...+--------+...
...|CCCCCCCC|...
...|CC+-----+...
...|CC|.........
...|CC|.........
...|CC|.........
...|CC|.........
...|CC|.........
...|CC+-----+...
...|CCCCCCCC|...
...+--------+...
................
评测用例规模与约定
　　所有的评测用例满足：2 ≤ m, n ≤ 100，0 ≤ q ≤ 100，0 ≤ x < m（x表示输入数据中所有位置的x坐标），
0 ≤ y < n（y表示输入数据中所有位置的y坐标）。

*/
